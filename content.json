{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"一些思考","date":"2022-03-14T12:59:27.313Z","updated":"2022-03-14T13:18:43.005Z","comments":true,"path":"2022/03/14/一些思考/","link":"","permalink":"http://example.com/2022/03/14/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/","excerpt":"","text":"学而不思则罔，思而不学则殆。现在才体会到这句话的精妙之处。只是学习而不思考就无法形成自己的知识，也就是无法消化，到时候遇到了同样的问题还是不会，只会做些课本的课后习题而已罢了。只是思考而不学习就会终日冥思苦想让自己很痛苦，却也没让自己进步。我的自身经历可以阐释这句话，之前一段时间很痴迷rust，然后稍微看了看官网上的那本书。结果看了一点儿就觉得学的到头了，该实践了，结果整日里就是瞎想怎么实践，怎么实践。就进入了一种空想的状态。之后重新学起来看起书来，才解决了这种症状。 今天主要想分享一件事情，我们怎么进步。无非就是滴水穿石罢了。经过大学四年之后，我感觉我也对一些问题深入钻研过，可是为什么到了现在总感觉自己没有进步呢？ 今天的经历给了我一个答案。今天是这样的，想找到原因，为什么我的多线程并行程序与查到的博客上一致，可是为什么达不到他描述的那种效果。就想找到这个错误的原因。结果今天碰巧找到的原因竟然是我运行实验的平台有问题，换个平台就好了。顿时我就意识到了多少次这样的答案让我想学点知识的心愿破裂了，久而久之，自己也就不想钻研了，大概也就是因为这种不是自己的失误造成的运行错误吧。 上面这样的情景还算不上糟糕。可怕的是你查遍了资料，依然找不到答案，可能是自己的没有找到搜索的方向，可能是没有搜对关键词等等。但就是找不到解决问题的答案，久而久之，自己也就懒得探索了，反正可能会遇到一堆莫名其妙的bug 不过以这个博客为分界，尽管还可能遇到上述的两种情况，依然要积极的去寻找答案！","categories":[],"tags":[]},{"title":"openmp学习小记","slug":"openmp学习小记","date":"2022-03-12T10:35:25.000Z","updated":"2022-03-12T12:58:14.516Z","comments":true,"path":"2022/03/12/openmp学习小记/","link":"","permalink":"http://example.com/2022/03/12/openmp%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/","excerpt":"","text":"之前朋友推荐过学习一个新东西最好从官网开始，不要直接读第二手博客。这里就借助学习openmp的契机，记录一下如何系统的学习一个新内容。 首先从官网openmp.org，可以找到如下的学习资料。 可以看到有reference，也有tutorial，我们自然是从tutorial来开始的，reference仅供之后的查找。 有如下的tutorial： Intro_To_OpenMP_Mattson 这页PPT大致说明了使用Openmp开发程序用的的一些结构，分为四层结构，用户层，程序层，系统层，硬件层。我们可以实际操作的应该就是程序层，大致有三部分，一是Directives， Compiler；OpenMP library；Environment variables； 我们主要使用的就是compiler directives，他的语法如下： #pragma omp construct [clause] 当然C++也提供了OpenMP相关的头文件，可以提供一些函数，omp.h 这张图重点强调了每个线程有自己私有的内存空间，也可以访问共享的内存区域。 这页PPT说明了编译器如何编译compiler directives，上面的编译过程和rust的多线程程序差不多。 1234567let mut threads = Vec::new();for i in 0..4&#123; threads.append(thread::spawn(||&#123;&#125;));&#125;for thread in threads&#123; thread.join();&#125; 思路都是一样的。 然后PPT提到了一个概念，多线程程序的拓展性，也就是加速比，我们肯定是希望2个线程的程序跑的比单线程的块，4个线程的更快，8个线程的更快，当然由于内存读写，具体任务等种种的限制可能不会达到完美的多线程扩展，但是我们要追求的就是更高的扩展，尽我们的最大的力量解决的那些可以人工避免的影响多线程扩展的bug，比如数据竞争的问题，循环之间的依赖等等。 数据竞争的问题，问哦们可以使用synchronization技术来解决。 下面看一种clause，schedule clause。 除了这个clause，还有collapse clause，reduction clause。 除了我们比较熟悉的parallel construct，还有single construct（donates a block of code that is executed by only one thread），master construct（donates a structured block that is only executed by the master thread.）","categories":[],"tags":[{"name":"openmp","slug":"openmp","permalink":"http://example.com/tags/openmp/"}]},{"title":"rust","slug":"rust","date":"2022-03-11T01:36:56.000Z","updated":"2022-03-11T02:09:04.460Z","comments":true,"path":"2022/03/11/rust/","link":"","permalink":"http://example.com/2022/03/11/rust/","excerpt":"","text":"","categories":[],"tags":[{"name":"rust","slug":"rust","permalink":"http://example.com/tags/rust/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-03-10T06:52:11.581Z","updated":"2022-03-10T06:52:11.581Z","comments":true,"path":"2022/03/10/hello-world/","link":"","permalink":"http://example.com/2022/03/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"openmp","slug":"openmp","permalink":"http://example.com/tags/openmp/"},{"name":"rust","slug":"rust","permalink":"http://example.com/tags/rust/"}]}